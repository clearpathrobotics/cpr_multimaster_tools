// Generated by message_relay for processing frame IDs in $(pkg_name) messages and services.
// DO NOT EDIT
#def camel_case($input)
$str().join(word.title() for word in $input.split('_'))#slurp
#end def

\#include "message_relay/processor/$(pkg_name)_message_processor.h"

\#include "ros/ros.h"

namespace message_relay
{

#for $processor in $processors

  #for $msg in $processors[$processor]['msgs']
template<>
void MessageProcessor<$(pkg_name)::$(msg), $camel_case($processor)>::processMessage($(pkg_name)::$(msg)::Ptr &msg, $camel_case($processor)::ConstPtr &$(processor))
{
      #for $operation in $processors[$processor]['msgs'][$msg]
$operation
      #end for
}

  #end for
  #for $srv in $processors[$processor]['srvs']
template<>
void ServiceProcessor<$(pkg_name)::$(srv), $camel_case($processor)>::processRequest($(pkg_name)::$(srv)::Request &req, $camel_case($processor)::ConstPtr &$(processor))
{
        #for $operation in $processors[$processor]['srvs'][$srv]['req']
$operation
        #end for
}

template<>
void ServiceProcessor<$(pkg_name)::$(srv), $camel_case($processor)>::processResponse($(pkg_name)::$(srv)::Response &res, $camel_case($processor)::ConstPtr &$(processor))
{
        #for $operation in $processors[$processor]['srvs'][$srv]['res']
$operation
        #end for
}

  #end for
#end for
}  // namespace message_relay
