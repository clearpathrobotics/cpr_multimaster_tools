// Generated by message_relay for processing frame IDs in $(pkg_name) messages and services.
// DO NOT EDIT

#def camel_case($input)
$str().join(word.title() for word in $input.split('_'))#slurp
#end def

#ifndef MESSAGE_RELAY_$(pkg_name.upper())_MESSAGE_PROCESSOR_H
#define MESSAGE_RELAY_$(pkg_name.upper())_MESSAGE_PROCESSOR_H

\#include "message_relay/processor/message_processor.h"

#for $msg in $msgs
\#include "$(pkg_name)/$(msg).h"
#end for

#for $srv in $srvs
\#include "$(pkg_name)/$(srv).h"
#end for

namespace message_relay
{

#for $processor in $processors
  #for $msg in $processors[$processor]['msgs']
template<>
void MessageProcessor<$(pkg_name)::$(msg), $camel_case($processor)>::processMessage($(pkg_name)::$(msg)::Ptr &msg, $camel_case($processor)::ConstPtr &$(processor));

  #end for
  #for $srv in $processors[$processor]['srvs']
template<>
void ServiceProcessor<$(pkg_name)::$(srv), $camel_case($processor)>::processRequest($(pkg_name)::$(srv)::Request &req, $camel_case($processor)::ConstPtr &$(processor));

template<>
void ServiceProcessor<$(pkg_name)::$(srv), $camel_case($processor)>::processResponse($(pkg_name)::$(srv)::Response &res, $camel_case($processor)::ConstPtr &$(processor));

  #end for
#end for
}  // namespace message_relay

#endif // MESSAGE_RELAY_$(pkg_name.upper())_MESSAGE_PROCESSOR_H
